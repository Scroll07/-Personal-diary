import sqlite3
from datetime import datetime
import asyncio
from pathlib import Path
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler
import os
from config import BOT_TOKEN, MY_ID

BASE_DIR = Path(__file__).resolve().parent
DB = BASE_DIR / 'diary.db'
BACKUP_DIR = BASE_DIR / 'backups'
os.makedirs(BACKUP_DIR, exist_ok=True)

db = sqlite3.connect(DB)
cursor = db.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS entries (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    text TEXT,
    date TEXT,
    pinned INTEGER DEFAULT 0
)
''')
db.commit()

async def backup_db(update: Update, context):
    user_id = update.effective_user.id
    if user_id == MY_ID:
        try:
            backup_file = BACKUP_DIR / f'diary_{datetime.now().strftime("%Y-%m-%d_%H-%M-%S")}.db'
            with sqlite3.connect(backup_file) as target_db:
                db.backup(target_db)
            await update.message.reply_text(f'–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {backup_file}')
        except Exception as e:
            await update.message.reply_text(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {e}')
    else:
        await update.message.reply_text('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!')

async def self_greeting(bot):
    await bot.send_message(chat_id=MY_ID, text='–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')

async def add(update: Update, context):
    text = ' '.join(context.args)
    if not text:
        await update.message.reply_text('–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ /add!')
        return
    user_id = update.effective_user.id
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    try:
        cursor.execute('INSERT INTO entries (user_id, text, date) VALUES (?, ?, ?)', (user_id, text, current_time))
        db.commit()
        await update.message.reply_text('–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫.')
    except Exception as e:
        update.message.reply_text(f'–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {e}')

async def get(update: Update, context):
    user_id = update.effective_user.id
    try:
        cursor.execute('SELECT * FROM entries WHERE user_id = ? AND pinned = 1 ORDER BY date DESC', (user_id,))
        pinned_entries = cursor.fetchall()
        cursor.execute('SELECT * FROM entries WHERE user_id = ? ORDER BY date DESC LIMIT 10', (user_id,))
        regular_entries = cursor.fetchall()
        if not regular_entries and not pinned_entries:
            await update.message.reply_text('–ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
            return
        result = ''
        if pinned_entries:
            result+= 'üìå –ó–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏üìå\n'
            result+= '\n'.join([f'[{num}] –î–∞—Ç–∞ {entry[3]} [{num}]\n–ó–∞–ø–∏—Å—å: {entry[2]}\n' for num, entry in enumerate(pinned_entries, start=1)])
            result+= '\n\n'
        if regular_entries:
            result+= '–û–±—ã—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):\n'
            result+= '\n'.join([f'[{num}] –î–∞—Ç–∞ {entry[3]} [{num}]\n–ó–∞–ø–∏—Å—å: {entry[2]}\n' for num, entry in enumerate(regular_entries, start=1)])
        await update.message.reply_text(result)
    except Exception as e:
        update.message.reply_text(f'–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {e}')

async def delete(update: Update, context):
    try:
        text = ' '.join(context.args)
        user_id = update.effective_user.id
        if text.lower() == 'all':
            keyboard = [
                [InlineKeyboardButton('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ', callback_data=f'del_all_yes_{user_id}'),
                InlineKeyboardButton('‚ùå –ù–µ—Ç', callback_data='del_no')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(chat_id=user_id, text='–£–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–ø–∏—Å–∏? –≠—Ç–æ –Ω–µ–æ–±–∞—Ç–∏–º–æ.', reply_markup=reply_markup)
            return
        if not text.isdigit():
            await context.bot.send_message(chat_id=user_id, text='–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ /delete (–ù–∞–ø—Ä–∏–º–µ—Ä /delete 3)')
            return
        num = int(text)
        cursor.execute('SELECT * FROM entries WHERE user_id = ? ORDER BY date DESC', (user_id,))
        entries = cursor.fetchall()
        if num < 1 or num > len(entries):
            await context.bot.send_message(chat_id=user_id, text='–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏.')
            return
        record_id = entries[num-1][0]
        keyboard = [
            [InlineKeyboardButton('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data=f'del_yes_{record_id}_{num}'),
            InlineKeyboardButton('‚ùå –ù–µ—Ç', callback_data='del_no')]
            ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(chat_id=user_id, text=f'–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å [{num}]?', reply_markup=reply_markup)
    except Exception as e:
        await context.bot.send_message(chat_id=user_id, text=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {e}')

async def edit(update: Update, context):
    try:
        args = context.args
        user_id = update.effective_user.id
        if len(args) < 2:
            await context.bot.send_message(chat_id=user_id, text='–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /edit (–ù–∞–ø—Ä–∏–º–µ—Ä /edit 3 <–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç>)')
            return
        num = args[0]
        new_text = ' '.join(args[1:])
        if not num.isdigit():
            await context.bot.send_message(chat_id=user_id, text='–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ /edit (–ù–∞–ø—Ä–∏–º–µ—Ä /edit 3 <–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç>)')
            return
        num = int(num)
        cursor.execute('SELECT * FROM entries WHERE user_id = ? ORDER BY date DESC', (user_id,))
        entries = cursor.fetchall()
        if num < 1 or num > len(entries):
            await context.bot.send_message(chat_id=user_id, text='–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏.')
            return
        record_id = entries[num-1][0]
        cursor.execute('UPDATE entries SET text = ? WHERE id = ? AND user_id = ?', (new_text, record_id, user_id))
        db.commit()
        await context.bot.send_message(chat_id=user_id, text=f'–ó–∞–ø–∏—Å—å [{num}] –∏–∑–º–µ–Ω–µ–Ω–∞.')
    except Exception as e:
        await context.bot.send_message(chat_id=user_id, text=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ {e}')

async def search(update: Update, context):
    try:
        user_id = update.effective_user.id
        text = ' '.join(context.args)
        if not text:
            await context.bot.send_message(chat_id=user_id, text='–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ /search')
            return
        cursor.execute('SELECT * FROM entries WHERE user_id = ? AND text LIKE ? ORDER BY date DESC', (user_id, f'%{text}%'))
        entries = cursor.fetchall()
        if not entries:
            await context.bot.send_message(chat_id=user_id, text=f'–ó–∞–ø–∏—Å–µ–π —Å —Ç–µ–∫—Å—Ç–æ–º "{text}" –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–æ.')
            return
        result = '\n'.join([f'[{num}] –î–∞—Ç–∞ {entry[3]} [{num}]\n–ó–∞–ø–∏—Å—å: {entry[2]}\n' for num, entry in enumerate(entries, start=1)])
        await context.bot.send_message(chat_id=user_id, text=result)
    except Exception as e:
        await context.bot.send_message(chat_id=user_id, text=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ {e}')

async def button(update: Update, context):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    if data.startswith('del_yes'):
        parts = data.split('_')
        record_id = parts[2]
        num = parts[3]
        cursor.execute('DELETE FROM entries WHERE user_id = ? AND id = ?', (user_id, record_id))
        db.commit()
        await query.edit_message_text(text=f'–ó–∞–ø–∏—Å—å [{num}] —É–¥–∞–ª–µ–Ω–∞.', reply_markup=None)
    
    elif data.startswith('del_all_yes'):
        cursor.execute('DELETE FROM entries WHERE user_id = ?', (user_id,))
        db.commit()
        await query.edit_message_text(text='–í—Å–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã.', reply_markup=None)

    elif data == 'del_no':
        await query.edit_message_text(text='–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è.', reply_markup=None)

async def pin(update: Update, context):
    try:
        user_id = update.effective_user.id
        args = context.args
        if len(args) < 1 or not args[0].isdigit():
            await context.bot.send_message(chat_id=user_id, text='–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ /pin (–ù–∞–ø—Ä–∏–º–µ—Ä /pin 3)')
            return
        num = int(args[0])
        cursor.execute('SELECT * FROM entries WHERE user_id = ? ORDER BY date DESC', (user_id,))
        entries = cursor.fetchall()
        if num < 1 or num > len(entries):
            await context.bot.send_message(chat_id=user_id, text='–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏.')
            return
        record_id = entries[num-1][0]
        cursor.execute('UPDATE entries SET pinned = 1 WHERE id = ? AND user_id = ?', (record_id, user_id))
        db.commit()
        await context.bot.send_message(chat_id=user_id, text=f'–ó–∞–ø–∏—Å—å [{num}] –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ üìå.')
    except Exception as e:
        await context.bot.send_message(chat_id=user_id, text=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ {e}')

async def unpin(update: Update, context):
    try:
        user_id = update.effective_user.id
        args = context.args
        if len(args) < 1 or not args[0].isdigit():
            await context.bot.send_message(chat_id=user_id, text='–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ /unpin (–ù–∞–ø—Ä–∏–º–µ—Ä /unpin 3)')
            return
        num = int(args[0])
        cursor.execute('SELECT * FROM entries WHERE user_id = ? ORDER BY date DESC', (user_id,))
        entries = cursor.fetchall()
        if num < 1 or num > len(entries):
            await context.bot.send_message(chat_id=user_id, text='–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏.')
            return
        record_id = entries[num-1][0]
        cursor.execute('UPDATE entries SET pinned = 0 WHERE id = ? AND user_id = ?', (record_id, user_id))
        db.commit()
        await context.bot.send_message(chat_id=user_id, text=f'–ó–∞–ø–∏—Å—å [{num}] –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∞.')
    except Exception as e:
        await context.bot.send_message(chat_id=user_id, text=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ {e}')

async def help_command(update, context):
    user_id = update.effective_user.id
    text='''
üìî **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É-–¥–Ω–µ–≤–Ω–∏–∫—É**

–í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- /add <—Ç–µ–∫—Å—Ç> ‚Äî –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –¥–Ω–µ–≤–Ω–∏–∫.
- /get ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (–∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ —Å–≤–µ—Ä—Ö—É).
- /edit <–Ω–æ–º–µ—Ä> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç> ‚Äî –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏ –ø–æ –Ω–æ–º–µ—Ä—É.
- /del <–Ω–æ–º–µ—Ä> –∏–ª–∏ /del all ‚Äî –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ –Ω–æ–º–µ—Ä—É –∏–ª–∏ –≤—Å–µ (—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º).
- /search <—Ç–µ–∫—Å—Ç> ‚Äî –ù–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É.
- /pin <–Ω–æ–º–µ—Ä> ‚Äî –ó–∞–∫—Ä–µ–ø–∏—Ç—å –∑–∞–ø–∏—Å—å (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–≤–µ—Ä—Ö—É –≤ /get).
- /unpin <–Ω–æ–º–µ—Ä> ‚Äî –û—Ç–∫—Ä–µ–ø–∏—Ç—å –∑–∞–ø–∏—Å—å.
- /backup ‚Äî –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞).

'''
    await context.bot.send_message(chat_id=user_id, text=text.strip())













async def main():
    TOKEN = '6800919140:AAGdEfIbQXRGskpQNJ0PII5Hfizf_Nfc1RA'  
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler('add', add))
    application.add_handler(CommandHandler('get', get))
    application.add_handler(CommandHandler('del', delete))
    application.add_handler(CommandHandler('backup', backup_db))
    application.add_handler(CommandHandler('edit', edit))
    application.add_handler(CommandHandler('search', search))
    application.add_handler(CommandHandler('pin', pin))
    application.add_handler(CommandHandler('unpin', unpin))
    application.add_handler(CommandHandler('help', help_command))
    
    application.add_handler(CallbackQueryHandler(button))

    await self_greeting(application.bot)

    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    await asyncio.Event().wait()

if __name__ == '__main__':
    asyncio.run(main())
    db.close()




























